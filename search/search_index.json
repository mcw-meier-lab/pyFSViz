{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyFSViz","text":"<p>Python tools for FreeSurfer visualization and QA</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install pyfsviz\n</code></pre> <p>With <code>uv</code>:</p> <pre><code>uv tool install pyfsviz\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#016-2025-10-30","title":"0.1.6 - 2025-10-30","text":"<p>Compare with 0.1.5</p>"},{"location":"changelog/#015-2025-10-28","title":"0.1.5 - 2025-10-28","text":"<p>Compare with 0.1.4</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>tlrc path (60425d2 by Lezlie Espana).</li> </ul>"},{"location":"changelog/#014-2025-10-28","title":"0.1.4 - 2025-10-28","text":"<p>Compare with 0.1.3</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>use pngs, fix htmls (185d543 by Lezlie Espana).</li> </ul>"},{"location":"changelog/#013-2025-10-28","title":"0.1.3 - 2025-10-28","text":"<p>Compare with 0.1.2</p>"},{"location":"changelog/#012-2025-10-28","title":"0.1.2 - 2025-10-28","text":"<p>Compare with 0.1.1</p>"},{"location":"changelog/#011-2025-10-28","title":"0.1.1 - 2025-10-28","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#010-2025-10-27","title":"0.1.0 - 2025-10-27","text":"<p>Compare with first commit</p>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>drop python 3.9 (4b21f95 by Lezlie Espana).</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>inital commit (2acb674 by Lezlie Espana).</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>add batch html report workflow (10d6423 by Lezlie Espana).</li> <li>add initial html reports (d118911 by Lezlie Espana).</li> <li>add initial figure generation (0ff4807 by Lezlie Espana).</li> <li>style, typing, testing (fb176fa by Lezlie Espana).</li> <li>add initial fs class (53864e8 by Lezlie Espana).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at lespana@mcw.edu. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd pyFSViz\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>make run pyfsviz [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build pyfsviz. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License babel Internationalization utilities <code>~=2.10</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.9</code> MIT beautifulsoup4 Screen-scraping library <code>&gt;=4.12</code> <code>4.14.2</code> MIT License certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.10.5</code> MPL-2.0 charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.4</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.3.0</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>~=0.4</code> <code>0.4.6</code> BSD License csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.45</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.13</code> <code>1.14.0</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.11</code> BSD-3-Clause Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.3.3</code> <code>3.9</code> BSD-3-Clause markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.11.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=1.0.0, &lt;4.0.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.2.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=1.1</code> <code>3.0.3</code> BSD-3-Clause mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21</code> <code>0.7.22</code> MIT License mdformat_tables An mdformat plugin for rendering tables. <code>&gt;=1.0</code> <code>1.0.0</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-api-autonav Autogenerate API docs with mkdocstrings, including nav <code>&gt;=0.4.0</code> <code>0.4.0</code> BSD-3-Clause mkdocs-autoapi MkDocs plugin providing automatic API reference generation <code>&gt;=0.4.1</code> <code>0.4.1</code> MIT License mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.3</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>2.0.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.4.7</code> MIT mkdocs-llmstxt MkDocs plugin to generate an /llms.txt file. <code>&gt;=0.2</code> <code>0.4.0</code> ISC mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.22</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.10</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29</code> <code>0.30.1</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.18.2</code> ISC packaging Core utilities for Python packages <code>&gt;=20.5</code> <code>25.0</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.5.0</code> MIT Pygments Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.19.2</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>&gt;=6.3</code> <code>10.16.1</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2025.1</code> <code>2025.2</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.3</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>1.1</code> MIT requests Python HTTP for Humans. <code>~=2.26</code> <code>2.32.5</code> Apache-2.0 six Python 2 and 3 compatibility utilities <code>&gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.8</code> MIT typing_extensions Backported and Experimental Type Hints for Python 3.9+ <code>&gt;=4.0</code> <code>4.15.0</code> PSF-2.0 urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.21.1, &lt;3</code> <code>2.5.0</code> MIT watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 wcwidth Measures the displayed width of unicode strings in a terminal <code>&gt;=0.2.13</code> <code>0.2.14</code> MIT"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 mcw-meier-lab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""},{"location":"autoapi/summary/pyfsviz/","title":"pyfsviz","text":""},{"location":"autoapi/summary/pyfsviz/#pyfsviz","title":"pyfsviz","text":"<p>pyFSViz package.</p> <p>Python tools for FreeSurfer visualization and QA</p> <p>Modules:</p> <ul> <li> <code>freesurfer</code>           \u2013            <p>FreeSurfer data.</p> </li> <li> <code>reports</code>           \u2013            <p>Utility class for generating a config file from a jinja template.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>FreeSurfer</code>           \u2013            <p>Base class for FreeSurfer data.</p> </li> <li> <code>Template</code>           \u2013            <p>Simplified jinja2 template class from oesteban.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_freesurfer_colormap</code>             \u2013              <p>Generate matplotlib colormap from FreeSurfer LUT.</p> </li> <li> <code>get_parser</code>             \u2013              <p>Return the CLI argument parser.</p> </li> <li> <code>main</code>             \u2013              <p>Run the main program.</p> </li> </ul>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer","title":"FreeSurfer","text":"<pre><code>FreeSurfer(freesurfer_home: str | None = None, subjects_dir: str | None = None, log_level: str = 'INFO')\n</code></pre> <p>Base class for FreeSurfer data.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>check_recon_all</code>             \u2013              <p>Verify that the subject's FreeSurfer recon finished successfully.</p> </li> <li> <code>gen_aparcaseg_plots</code>             \u2013              <p>Generate parcellation images (aparc &amp; aseg) and return the path to the aparcaseg.png file.</p> </li> <li> <code>gen_batch_reports</code>             \u2013              <p>Generate HTML reports with images for multiple subjects.</p> </li> <li> <code>gen_html_report</code>             \u2013              <p>Generate html report with FreeSurfer images.</p> </li> <li> <code>gen_surf_plots</code>             \u2013              <p>Generate pial, inflated, and sulcal images from various viewpoints.</p> </li> <li> <code>gen_tlrc_data</code>             \u2013              <p>Generate inverse talairach data for report generation.</p> </li> <li> <code>gen_tlrc_report</code>             \u2013              <p>Generate a before and after report of Talairach registration. (Will also run file generation if needed).</p> </li> <li> <code>get_colormap</code>             \u2013              <p>Return the colormap for the FreeSurfer data.</p> </li> <li> <code>get_subjects</code>             \u2013              <p>Return the subjects in the subjects directory.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>freesurfer_home</code>           \u2013            <p>Path to the FreeSurfer home directory.</p> </li> <li> <code>logger</code>           \u2013            <p>Logger for the FreeSurfer class.</p> </li> <li> <code>subjects_dir</code>           \u2013            <p>Path to the subjects directory.</p> </li> </ul> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def __init__(\n    self,\n    freesurfer_home: str | None = None,\n    subjects_dir: str | None = None,\n    log_level: str = \"INFO\",\n):\n    \"\"\"Initialize the FreeSurfer data.\n\n    Parameters\n    ----------\n    freesurfer_home : str representing a path to a directory\n        Path corresponding to FREESURFER_HOME env var.\n    subjects_dir : str representing a path to a directory\n        Path corresponding to SUBJECTS_DIR env var.\n    log_level : str\n        Logging level (e.g., \"INFO\", \"DEBUG\", \"WARNING\").\n        Default is \"INFO\".\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    # Set up logger\n    logging.basicConfig(level=getattr(logging, log_level.upper()))\n    self.logger = logging.getLogger(f\"{__name__}.{self.__class__.__name__}\")\n    \"\"\"Logger for the FreeSurfer class.\"\"\"\n\n    if freesurfer_home is None:\n        self.freesurfer_home = Path(os.environ.get(\"FREESURFER_HOME\") or \"\")\n        \"\"\"Path to the FreeSurfer home directory.\"\"\"\n    else:\n        self.freesurfer_home = Path(freesurfer_home)\n        \"\"\"Path to the FreeSurfer home directory.\"\"\"\n    if not self.freesurfer_home.exists():\n        raise FileNotFoundError(f\"FREESURFER_HOME not found: {self.freesurfer_home}\")\n    if self.freesurfer_home is None:\n        raise ValueError(\"FREESURFER_HOME must be set\")\n\n    if subjects_dir is None:\n        self.subjects_dir = Path(os.environ.get(\"SUBJECTS_DIR\") or \"\")\n        \"\"\"Path to the subjects directory.\"\"\"\n    else:\n        self.subjects_dir = Path(subjects_dir)\n        \"\"\"Path to the subjects directory.\"\"\"\n    if not self.subjects_dir.exists():\n        raise FileNotFoundError(f\"SUBJECTS_DIR not found: {self.subjects_dir}\")\n    \"\"\"Path to the subjects directory.\"\"\"\n    self._mni_nii = files(\"pyfsviz._internal\") / \"mni305.cor.nii.gz\"\n    \"\"\"Path to the MNI template NIfTI file.\"\"\"\n    self._mni_mgz = files(\"pyfsviz._internal\") / \"mni305.cor.mgz\"\n    \"\"\"Path to the MNI template MGH file.\"\"\"\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer(freesurfer_home)","title":"<code>freesurfer_home</code>","text":"(<code>str representing a path to a directory</code>, default:                   <code>None</code> )           \u2013            <p>Path corresponding to FREESURFER_HOME env var.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer(subjects_dir)","title":"<code>subjects_dir</code>","text":"(<code>str representing a path to a directory</code>, default:                   <code>None</code> )           \u2013            <p>Path corresponding to SUBJECTS_DIR env var.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer(log_level)","title":"<code>log_level</code>","text":"(<code>str</code>, default:                   <code>'INFO'</code> )           \u2013            <p>Logging level (e.g., \"INFO\", \"DEBUG\", \"WARNING\"). Default is \"INFO\".</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.freesurfer_home","title":"freesurfer_home  <code>instance-attribute</code>","text":"<pre><code>freesurfer_home = Path(get('FREESURFER_HOME') or '')\n</code></pre> <p>Path to the FreeSurfer home directory.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = getLogger(f'{__name__}.{__name__}')\n</code></pre> <p>Logger for the FreeSurfer class.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.subjects_dir","title":"subjects_dir  <code>instance-attribute</code>","text":"<pre><code>subjects_dir = Path(get('SUBJECTS_DIR') or '')\n</code></pre> <p>Path to the subjects directory.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.check_recon_all","title":"check_recon_all","text":"<pre><code>check_recon_all(subject: str) -&gt; bool\n</code></pre> <p>Verify that the subject's FreeSurfer recon finished successfully.</p> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def check_recon_all(self, subject: str) -&gt; bool:\n    \"\"\"Verify that the subject's FreeSurfer recon finished successfully.\"\"\"\n    recon_file = self.subjects_dir / subject / \"scripts\" / \"recon-all.log\"\n\n    with open(recon_file, encoding=\"utf-8\") as f:\n        line = f.readlines()[-1]\n        return \"finished without error\" in line\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_aparcaseg_plots","title":"gen_aparcaseg_plots","text":"<pre><code>gen_aparcaseg_plots(subject: str, output_dir: str) -&gt; Path\n</code></pre> <p>Generate parcellation images (aparc &amp; aseg) and return the path to the aparcaseg.png file.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Path</code> (              <code>Path</code> )          \u2013            <p>Path to the aparcaseg.png file.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n&gt;&gt;&gt; fs_dir = FreeSurfer(\n...     freesurfer_home=\"/opt/freesurfer\",\n...     subjects_dir=\"/opt/data\",\n...     subject=\"sub-001\",\n... )\n&gt;&gt;&gt; images = fs_dir.gen_aparcaseg_plots(\n...     \"sub-001\", Path(\"/opt/data/sub-001/mri/transforms\")\n... )\n</code></pre> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def gen_aparcaseg_plots(self, subject: str, output_dir: str) -&gt; Path:\n    \"\"\"Generate parcellation images (aparc &amp; aseg) and return the path to the aparcaseg.png file.\n\n    Parameters\n    ----------\n    subject : str\n        Subject ID.\n    output_dir : str\n        Path to output directory.\n\n    Returns\n    -------\n    Path:\n        Path to the aparcaseg.png file.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n    &gt;&gt;&gt; fs_dir = FreeSurfer(\n    ...     freesurfer_home=\"/opt/freesurfer\",\n    ...     subjects_dir=\"/opt/data\",\n    ...     subject=\"sub-001\",\n    ... )\n    &gt;&gt;&gt; images = fs_dir.gen_aparcaseg_plots(\n    ...     \"sub-001\", Path(\"/opt/data/sub-001/mri/transforms\")\n    ... )\n    \"\"\"\n    fsqc.run_fsqc(\n        subjects_dir=self.subjects_dir,\n        output_dir=output_dir,\n        subjects=[subject],\n        screenshots=True,\n        screenshots_overlay=\"aparc+aseg.mgz\",\n        screenshots_views=[\n            \"x=-40\",\n            \"x=-30\",\n            \"x=-20\",\n            \"x=-10\",\n            \"x=0\",\n            \"x=10\",\n            \"x=20\",\n            \"x=30\",\n            \"x=40\",\n            \"y=-40\",\n            \"y=-30\",\n            \"y=-20\",\n            \"y=-10\",\n            \"y=0\",\n            \"y=10\",\n            \"y=20\",\n            \"y=30\",\n            \"y=40\",\n            \"z=-40\",\n            \"z=-30\",\n            \"z=-20\",\n            \"z=-10\",\n            \"z=0\",\n            \"z=10\",\n            \"z=20\",\n            \"z=30\",\n            \"z=40\",\n        ],\n        screenshots_layout=[\"3\", \"9\"],\n        no_group=True,\n    )\n\n    # Clean up/move files\n    shutil.move(f\"{output_dir}/screenshots/{subject}/{subject}.png\", f\"{output_dir}/aparcaseg.png\")\n    shutil.move(f\"{output_dir}/metrics/{subject}/metrics.csv\", f\"{output_dir}/metrics.csv\")\n    shutil.rmtree(f\"{output_dir}/screenshots\")\n    shutil.rmtree(f\"{output_dir}/status\")\n    shutil.rmtree(f\"{output_dir}/metrics\")\n\n    return Path(f\"{output_dir}/aparcaseg.png\")\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_aparcaseg_plots(subject)","title":"<code>subject</code>","text":"(<code>str</code>)           \u2013            <p>Subject ID.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_aparcaseg_plots(output_dir)","title":"<code>output_dir</code>","text":"(<code>str</code>)           \u2013            <p>Path to output directory.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_batch_reports","title":"gen_batch_reports","text":"<pre><code>gen_batch_reports(output_dir: str | Path, subjects: list[str] | None = None, template: str | None = None, *, gen_images: bool = True, skip_failed: bool = True) -&gt; dict[str, Path | Exception]\n</code></pre> <p>Generate HTML reports with images for multiple subjects.</p> <p>This method first generates all required images (TLRC, aparc+aseg, surfaces) and then creates HTML reports for each subject.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Path | Exception]</code>           \u2013            <p>Dictionary mapping subject IDs to either the generated HTML file path or the exception that occurred during processing.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n&gt;&gt;&gt; fs = FreeSurfer()\n&gt;&gt;&gt; results = fs.gen_batch_reports(\"reports/\", log_level=\"INFO\")\n&gt;&gt;&gt; for subject, result in results.items():\n...     if isinstance(result, Path):\n...         print(f\"Generated report for {subject}: {result}\")\n...     else:\n...         print(f\"Failed to generate report for {subject}: {result}\")\n</code></pre> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def gen_batch_reports(\n    self,\n    output_dir: str | Path,\n    subjects: list[str] | None = None,\n    template: str | None = None,\n    *,\n    gen_images: bool = True,\n    skip_failed: bool = True,\n) -&gt; dict[str, Path | Exception]:\n    \"\"\"Generate HTML reports with images for multiple subjects.\n\n    This method first generates all required images (TLRC, aparc+aseg, surfaces)\n    and then creates HTML reports for each subject.\n\n    Parameters\n    ----------\n    output_dir : str or Path\n        Directory where HTML reports will be saved.\n    subjects : list[str] or None\n        List of subject IDs to process. If None, processes all subjects\n        in the subjects directory.\n    template : str or None\n        HTML template to use. Default is local individual.html.\n    gen_images : bool\n        Generate images for each subject. Default is True.\n    skip_failed : bool\n        If True, continues processing other subjects if one fails.\n        If False, raises exception on first failure.\n\n    Returns\n    -------\n    dict[str, Path | Exception]\n        Dictionary mapping subject IDs to either the generated HTML file\n        path or the exception that occurred during processing.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n    &gt;&gt;&gt; fs = FreeSurfer()\n    &gt;&gt;&gt; results = fs.gen_batch_reports(\"reports/\", log_level=\"INFO\")\n    &gt;&gt;&gt; for subject, result in results.items():\n    ...     if isinstance(result, Path):\n    ...         print(f\"Generated report for {subject}: {result}\")\n    ...     else:\n    ...         print(f\"Failed to generate report for {subject}: {result}\")\n    \"\"\"\n    output_dir = Path(output_dir)\n    output_dir.mkdir(parents=True, exist_ok=True)\n\n    if subjects is None:\n        subjects = self.get_subjects()\n\n    self.logger.info(f\"Generating reports with images for {len(subjects)} subjects...\")\n    self.logger.info(f\"Output directory: {output_dir}\")\n\n    results: dict[str, Path | Exception] = {}\n\n    for i, subject in enumerate(subjects, 1):\n        self.logger.info(f\"[{i}/{len(subjects)}] Processing subject: {subject}\")\n\n        try:\n            # Check if recon-all completed successfully\n            if not self.check_recon_all(subject):\n                self.logger.warning(f\"Subject {subject} recon-all did not complete successfully\")\n\n            # Create subject-specific output directory for images\n            subject_output_dir = output_dir / subject\n            subject_output_dir.mkdir(parents=True, exist_ok=True)\n\n            # Generate images\n            self.logger.info(f\"  Generating images for {subject}...\")\n\n            img_list = []\n            if gen_images:\n                # Generate TLRC data and report\n                # Use a temporary subdirectory for intermediate files\n                temp_tlrc_dir = subject_output_dir / \"tlrc_temp\"\n                temp_tlrc_dir.mkdir(exist_ok=True)\n\n                self.gen_tlrc_data(subject, str(temp_tlrc_dir))\n                tlrc = Path(self.gen_tlrc_report(subject, str(temp_tlrc_dir)))\n\n                # Move tlrc.svg to subject directory\n                if tlrc.exists():\n                    new_tlrc_path = subject_output_dir / \"tlrc.svg\"\n                    tlrc.rename(new_tlrc_path)\n                    img_list.append(new_tlrc_path)\n                else:\n                    img_list.append(tlrc)\n\n                # Clean up intermediate files\n                shutil.rmtree(temp_tlrc_dir, ignore_errors=True)\n\n                # Generate aparc+aseg plots - save directly to subject directory\n                aparcaseg = self.gen_aparcaseg_plots(subject, str(subject_output_dir))\n                img_list.append(aparcaseg)\n\n                # Generate surface plots - save directly to subject directory\n                surf = self.gen_surf_plots(subject, str(subject_output_dir))\n                img_list.extend(surf)\n            else:\n                img_list = list(subject_output_dir.glob(\"**/*.{png,svg}\"))\n\n            # Generate HTML report using all generated images\n            html_file = self.gen_html_report(\n                subject=subject,\n                output_dir=str(output_dir),\n                img_list=img_list,\n                template=template,\n            )\n\n            results[subject] = html_file\n\n            self.logger.info(f\"  \u2713 Generated report with images: {html_file}\")\n\n        except Exception as e:\n            error_msg = f\"Failed to generate report with images for {subject}: {e!s}\"\n            results[subject] = e\n\n            self.logger.error(f\"  \u2717 {error_msg}\")  # noqa: TRY400\n\n            if not skip_failed:\n                raise e  # noqa: TRY201 # pylint: disable=try-except-raise\n\n    successful = sum(1 for result in results.values() if isinstance(result, Path))\n    failed = len(results) - successful\n    self.logger.info(\"\\nBatch report generation with images completed:\")\n    self.logger.info(f\"  Successful: {successful}\")\n    self.logger.info(f\"  Failed: {failed}\")\n\n    return results\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_batch_reports(output_dir)","title":"<code>output_dir</code>","text":"(<code>str or Path</code>)           \u2013            <p>Directory where HTML reports will be saved.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_batch_reports(subjects)","title":"<code>subjects</code>","text":"(<code>list[str] or None</code>, default:                   <code>None</code> )           \u2013            <p>List of subject IDs to process. If None, processes all subjects in the subjects directory.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_batch_reports(template)","title":"<code>template</code>","text":"(<code>str or None</code>, default:                   <code>None</code> )           \u2013            <p>HTML template to use. Default is local individual.html.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_batch_reports(gen_images)","title":"<code>gen_images</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Generate images for each subject. Default is True.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_batch_reports(skip_failed)","title":"<code>skip_failed</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, continues processing other subjects if one fails. If False, raises exception on first failure.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_html_report","title":"gen_html_report","text":"<pre><code>gen_html_report(subject: str, output_dir: str, img_list: list[Path] | None = None, template: str | None = None) -&gt; Path\n</code></pre> <p>Generate html report with FreeSurfer images.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Path</code> (              <code>Path</code> )          \u2013            <p>Path to html file.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n&gt;&gt;&gt; fs_dir = FreeSurfer(\n...     freesurfer_home=\"/opt/freesurfer\",\n...     subjects_dir=\"/opt/data\",\n...     subject=\"sub-001\",\n... )\n&gt;&gt;&gt; report = fs_dir.gen_html_report(out_name=\"sub-001.html\", output_dir=\".\")\n</code></pre> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def gen_html_report(\n    self,\n    subject: str,\n    output_dir: str,\n    img_list: list[Path] | None = None,\n    template: str | None = None,\n) -&gt; Path:\n    \"\"\"Generate html report with FreeSurfer images.\n\n    Parameters\n    ----------\n    subject : str\n        Subject ID.\n    output_dir : str\n        HTML file name\n    img_list : list[Path] | None\n        List of image paths (PNG format).\n    template : str | None\n        HTML template to use. Default is local freesurfer.html.\n\n    Returns\n    -------\n    Path:\n        Path to html file.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n    &gt;&gt;&gt; fs_dir = FreeSurfer(\n    ...     freesurfer_home=\"/opt/freesurfer\",\n    ...     subjects_dir=\"/opt/data\",\n    ...     subject=\"sub-001\",\n    ... )\n    &gt;&gt;&gt; report = fs_dir.gen_html_report(out_name=\"sub-001.html\", output_dir=\".\")\n    \"\"\"\n    if template is None:\n        template = files(\"pyfsviz._internal.html\") / \"individual.html\"\n    if img_list is None:\n        img_list = list((self.subjects_dir / subject).glob(\"**/*.{png,svg}\"))\n\n    tlrc = []\n    aseg = []\n    surf = []\n\n    output_path = Path(output_dir)\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    # Subject-specific directory\n    subject_dir = output_path / subject\n    subject_dir.mkdir(parents=True, exist_ok=True)\n\n    for img in img_list:\n        if \"tlrc\" in img.name and img.suffix == \".svg\":\n            # Read SVG content directly for embedding\n            with open(img, encoding=\"utf-8\") as f:\n                svg_content = f.read()\n            tlrc.append(svg_content)\n        # Images are already in the subject directory, just reference by filename\n        elif \"aparcaseg\" in img.name:\n            aseg.append(img.name)\n        else:\n            labels = {\n                \"lh_pial\": \"LH Pial\",\n                \"rh_pial\": \"RH Pial\",\n                \"lh_infl\": \"LH Inflated\",\n                \"rh_infl\": \"RH Inflated\",\n                \"lh_white\": \"LH White Matter\",\n                \"rh_white\": \"RH White Matter\",\n            }\n            surface_type = img.stem\n            surf_tuple = (labels.get(surface_type, surface_type), img.name)\n            surf.append(surf_tuple)\n\n    # Read metrics.csv if it exists\n    metrics = None\n    metrics_csv_path = output_path / \"metrics.csv\"\n    if metrics_csv_path.exists():\n        try:\n            df = pd.read_csv(metrics_csv_path)\n            # Filter for current subject if subject column exists\n            if \"subject\" in df.columns:\n                subject_data = df[df[\"subject\"] == subject]\n                if not subject_data.empty:\n                    metrics = subject_data.iloc[0].to_dict()\n            # If no subject column, assume single row\n            elif len(df) &gt; 0:\n                metrics = df.iloc[0].to_dict()\n            # Replace NaN values with None for proper Jinja2 handling\n            if metrics:\n                metrics = {k: (None if pd.isna(v) else v) for k, v in metrics.items()}\n        except (pd.errors.EmptyDataError, pd.errors.ParserError, UnicodeDecodeError, PermissionError, OSError) as e:\n            self.logger.warning(f\"Could not read metrics.csv: {e}\")\n\n    _config = {\n        \"timestamp\": datetime.datetime.now(tz=datetime.timezone.utc).strftime(\"%Y-%m-%d, %H:%M\"),\n        \"subject\": subject,\n        \"tlrc\": tlrc,\n        \"aseg\": aseg,\n        \"surf\": surf,\n        \"metrics\": metrics,\n    }\n\n    # Save HTML file in subject directory\n    html_file = subject_dir / f\"{subject}.html\"\n    tpl = Template(str(template))\n    tpl.generate_conf(_config, str(html_file))\n\n    return html_file\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_html_report(subject)","title":"<code>subject</code>","text":"(<code>str</code>)           \u2013            <p>Subject ID.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_html_report(output_dir)","title":"<code>output_dir</code>","text":"(<code>str</code>)           \u2013            <p>HTML file name</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_html_report(img_list)","title":"<code>img_list</code>","text":"(<code>list[Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>List of image paths (PNG format).</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_html_report(template)","title":"<code>template</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>HTML template to use. Default is local freesurfer.html.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_surf_plots","title":"gen_surf_plots","text":"<pre><code>gen_surf_plots(subject: str, output_dir: str) -&gt; list[Path]\n</code></pre> <p>Generate pial, inflated, and sulcal images from various viewpoints.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Path]:</code>           \u2013            <p>List of generated PNG images</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n&gt;&gt;&gt; fs_dir = FreeSurfer(\n...     freesurfer_home=\"/opt/freesurfer\",\n...     subjects_dir=\"/opt/data\",\n...     subject=\"sub-001\",\n... )\n&gt;&gt;&gt; images = fs_dir.gen_surf_plots(\"sub-001\", Path(\"/opt/data/sub-001/surf\"))\n</code></pre> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def gen_surf_plots(self, subject: str, output_dir: str) -&gt; list[Path]:\n    \"\"\"Generate pial, inflated, and sulcal images from various viewpoints.\n\n    Parameters\n    ----------\n    output_dir : str\n        Surface plot output directory.\n\n    Returns\n    -------\n    list[Path]:\n        List of generated PNG images\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n    &gt;&gt;&gt; fs_dir = FreeSurfer(\n    ...     freesurfer_home=\"/opt/freesurfer\",\n    ...     subjects_dir=\"/opt/data\",\n    ...     subject=\"sub-001\",\n    ... )\n    &gt;&gt;&gt; images = fs_dir.gen_surf_plots(\"sub-001\", Path(\"/opt/data/sub-001/surf\"))\n    \"\"\"\n    surf_dir = f\"{self.subjects_dir}/{subject}/surf\"\n    label_dir = f\"{self.subjects_dir}/{subject}/label\"\n    cmap = self.get_colormap()\n\n    hemis = {\"lh\": \"left\", \"rh\": \"right\"}\n    for key, val in hemis.items():\n        pial = f\"{surf_dir}/{key}.pial\"\n        inflated = f\"{surf_dir}/{key}.inflated\"\n        sulc = f\"{surf_dir}/{key}.sulc\"\n        white = f\"{surf_dir}/{key}.white\"\n        annot = f\"{label_dir}/{key}.aparc.annot\"\n\n        label_files = {pial: \"pial\", inflated: \"infl\", white: \"white\"}\n\n        for surf, label in label_files.items():\n            fig, axs = plt.subplots(2, 3, subplot_kw={\"projection\": \"3d\"})\n            plotting.plot_surf_roi(\n                surf,\n                annot,\n                hemi=val,\n                view=\"lateral\",\n                bg_map=sulc,\n                bg_on_data=True,\n                darkness=1,\n                cmap=cmap,\n                axes=axs[0, 0],\n                figure=fig,\n                colorbar=False,\n            )\n            plotting.plot_surf_roi(\n                surf,\n                annot,\n                hemi=val,\n                view=\"medial\",\n                bg_map=sulc,\n                bg_on_data=True,\n                darkness=1,\n                cmap=cmap,\n                axes=axs[0, 1],\n                figure=fig,\n                colorbar=False,\n            )\n            plotting.plot_surf_roi(\n                surf,\n                annot,\n                hemi=val,\n                view=\"dorsal\",\n                bg_map=sulc,\n                bg_on_data=True,\n                darkness=1,\n                cmap=cmap,\n                axes=axs[0, 2],\n                figure=fig,\n                colorbar=False,\n            )\n            plotting.plot_surf_roi(\n                surf,\n                annot,\n                hemi=val,\n                view=\"ventral\",\n                bg_map=sulc,\n                bg_on_data=True,\n                darkness=1,\n                cmap=cmap,\n                axes=axs[1, 0],\n                figure=fig,\n                colorbar=False,\n            )\n            plotting.plot_surf_roi(\n                surf,\n                annot,\n                hemi=val,\n                view=\"anterior\",\n                bg_map=sulc,\n                bg_on_data=True,\n                darkness=1,\n                cmap=cmap,\n                axes=axs[1, 1],\n                figure=fig,\n                colorbar=False,\n            )\n            plotting.plot_surf_roi(\n                surf,\n                annot,\n                hemi=val,\n                view=\"posterior\",\n                bg_map=sulc,\n                bg_on_data=True,\n                darkness=1,\n                cmap=cmap,\n                axes=axs[1, 2],\n                figure=fig,\n                colorbar=False,\n            )\n\n            plt.savefig(f\"{output_dir}/{key}_{label}.png\", dpi=300, format=\"png\")\n            plt.close()\n\n    return sorted(Path(output_dir).glob(\"*.png\"))\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_surf_plots(output_dir)","title":"<code>output_dir</code>","text":"(<code>str</code>)           \u2013            <p>Surface plot output directory.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_tlrc_data","title":"gen_tlrc_data","text":"<pre><code>gen_tlrc_data(subject: str, output_dir: str) -&gt; None\n</code></pre> <p>Generate inverse talairach data for report generation.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n&gt;&gt;&gt; fs_dir = FreeSurfer(\n...     freesurfer_home=\"/opt/freesurfer\",\n...     subjects_dir=\"/opt/data\",\n...     subject=\"sub-001\",\n... )\n&gt;&gt;&gt; fs_dir.gen_tlrc_data(\"sub-001\", Path(\"/opt/data/sub-001/mri/transforms\"))\n</code></pre> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def gen_tlrc_data(self, subject: str, output_dir: str) -&gt; None:\n    \"\"\"Generate inverse talairach data for report generation.\n\n    Parameters\n    ----------\n    output_dir : str\n        Path for intermediate file output.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n    &gt;&gt;&gt; fs_dir = FreeSurfer(\n    ...     freesurfer_home=\"/opt/freesurfer\",\n    ...     subjects_dir=\"/opt/data\",\n    ...     subject=\"sub-001\",\n    ... )\n    &gt;&gt;&gt; fs_dir.gen_tlrc_data(\"sub-001\", Path(\"/opt/data/sub-001/mri/transforms\"))\n    \"\"\"\n    # get inverse transform\n    lta_file = self.subjects_dir / subject / \"mri\" / \"transforms\" / \"talairach.xfm.lta\"\n    xfm = np.genfromtxt(lta_file, skip_header=5, max_rows=4)\n    inverse_xfm = np.linalg.inv(xfm)\n    np.savetxt(\n        f\"{output_dir}/inv.xfm\",\n        inverse_xfm,\n        fmt=\"%0.8f\",\n        delimiter=\" \",\n        newline=\"\\n\",\n        encoding=\"utf-8\",\n    )\n\n    # convert subject original T1 to nifti (for FSL)\n    convert = MRIConvert(\n        in_file=self.subjects_dir / subject / \"mri\" / \"orig.mgz\",\n        out_file=f\"{output_dir}/orig.nii.gz\",\n        out_type=\"niigz\",\n    )\n    convert.run()\n\n    # use FSL to convert template file to subject original space\n    flirt = FLIRT(\n        in_file=self._mni_nii,\n        reference=f\"{output_dir}/orig.nii.gz\",\n        out_file=f\"{output_dir}/mni2orig.nii.gz\",\n        in_matrix_file=f\"{output_dir}/inv.xfm\",\n        apply_xfm=True,\n        out_matrix_file=f\"{output_dir}/out.mat\",\n    )\n    flirt.run()\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_tlrc_data(output_dir)","title":"<code>output_dir</code>","text":"(<code>str</code>)           \u2013            <p>Path for intermediate file output.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_tlrc_report","title":"gen_tlrc_report","text":"<pre><code>gen_tlrc_report(subject: str, output_dir: str, tlrc_dir: str | None = None, *, gen_data: bool = True) -&gt; Path\n</code></pre> <p>Generate a before and after report of Talairach registration. (Will also run file generation if needed).</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Path</code> (              <code>Path</code> )          \u2013            <p>SVG file generated from the niworkflows SimpleBeforeAfterRPT</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n&gt;&gt;&gt; fs_dir = FreeSurfer(\n...     freesurfer_home=\"/opt/freesurfer\",\n...     subjects_dir=\"/opt/data\",\n...     subject=\"sub-001\",\n... )\n&gt;&gt;&gt; report = fs_dir.gen_tlrc_report(\n...     \"sub-001\", Path(\"/opt/data/sub-001/mri/transforms\")\n... )\n</code></pre> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def gen_tlrc_report(\n    self,\n    subject: str,\n    output_dir: str,\n    tlrc_dir: str | None = None,\n    *,\n    gen_data: bool = True,\n) -&gt; Path:\n    \"\"\"Generate a before and after report of Talairach registration. (Will also run file generation if needed).\n\n    Parameters\n    ----------\n    subject : str\n        Subject ID.\n    output_dir : str\n        Path to SVG output.\n    gen_data : bool\n        Generate inverse Talairach data, by default True\n    tlrc_dir : str | None\n        Path to output of `gen_tlrc_data`. Default is the subject's mri/transforms directory.\n\n    Returns\n    -------\n    Path:\n        SVG file generated from the niworkflows SimpleBeforeAfterRPT\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n    &gt;&gt;&gt; fs_dir = FreeSurfer(\n    ...     freesurfer_home=\"/opt/freesurfer\",\n    ...     subjects_dir=\"/opt/data\",\n    ...     subject=\"sub-001\",\n    ... )\n    &gt;&gt;&gt; report = fs_dir.gen_tlrc_report(\n    ...     \"sub-001\", Path(\"/opt/data/sub-001/mri/transforms\")\n    ... )\n    \"\"\"\n    if tlrc_dir is None:\n        tlrc_dir = f\"{self.subjects_dir}/{subject}/mri/transforms\"\n\n    mri_dir = f\"{self.subjects_dir}/{subject}/mri\"\n\n    if gen_data:\n        self.gen_tlrc_data(subject, tlrc_dir)\n\n    # use white matter segmentation to compare registrations\n    report = SimpleBeforeAfterRPT(\n        before=f\"{mri_dir}/orig.mgz\",\n        after=f\"{tlrc_dir}/mni2orig.nii.gz\",\n        wm_seg=f\"{mri_dir}/wm.mgz\",\n        before_label=\"Subject Orig\",\n        after_label=\"Template\",\n        out_report=f\"{output_dir}/tlrc.svg\",\n    )\n    result = report.run()\n    return result.outputs.out_report\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_tlrc_report(subject)","title":"<code>subject</code>","text":"(<code>str</code>)           \u2013            <p>Subject ID.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_tlrc_report(output_dir)","title":"<code>output_dir</code>","text":"(<code>str</code>)           \u2013            <p>Path to SVG output.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_tlrc_report(gen_data)","title":"<code>gen_data</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Generate inverse Talairach data, by default True</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.gen_tlrc_report(tlrc_dir)","title":"<code>tlrc_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Path to output of <code>gen_tlrc_data</code>. Default is the subject's mri/transforms directory.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.get_colormap","title":"get_colormap","text":"<pre><code>get_colormap() -&gt; ListedColormap\n</code></pre> <p>Return the colormap for the FreeSurfer data.</p> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def get_colormap(self) -&gt; colors.ListedColormap:\n    \"\"\"Return the colormap for the FreeSurfer data.\"\"\"\n    return get_freesurfer_colormap(self.freesurfer_home)\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.FreeSurfer.get_subjects","title":"get_subjects","text":"<pre><code>get_subjects() -&gt; list[str]\n</code></pre> <p>Return the subjects in the subjects directory.</p> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def get_subjects(self) -&gt; list[str]:\n    \"\"\"Return the subjects in the subjects directory.\"\"\"\n    return [\n        subject.name\n        for subject in self.subjects_dir.iterdir()\n        if subject.is_dir() and (subject / \"mri\" / \"transforms\" / \"talairach.lta\").exists()\n    ]\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.Template","title":"Template","text":"<pre><code>Template(template_str: str)\n</code></pre> <p>Simplified jinja2 template class from oesteban.</p> <p>Methods:</p> <ul> <li> <code>compile</code>             \u2013              <p>Generate a string with the replacements.</p> </li> <li> <code>generate_conf</code>             \u2013              <p>Save the outcome after replacement on the template to file.</p> </li> </ul> Source code in <code>src/pyfsviz/reports.py</code> <pre><code>def __init__(self, template_str: str) -&gt; None:\n    self._template_str = template_str\n    self._env = jinja2.Environment(\n        loader=jinja2.FileSystemLoader(searchpath=\"/\"),\n        trim_blocks=True,\n        lstrip_blocks=True,\n        autoescape=True,\n    )\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.Template.compile","title":"compile","text":"<pre><code>compile(configs: dict) -&gt; str\n</code></pre> <p>Generate a string with the replacements.</p> Source code in <code>src/pyfsviz/reports.py</code> <pre><code>def compile(self, configs: dict) -&gt; str:\n    \"\"\"Generate a string with the replacements.\"\"\"\n    template = self._env.get_template(self._template_str)\n    return template.render(configs)\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.Template.generate_conf","title":"generate_conf","text":"<pre><code>generate_conf(configs: dict, path: str) -&gt; None\n</code></pre> <p>Save the outcome after replacement on the template to file.</p> Source code in <code>src/pyfsviz/reports.py</code> <pre><code>def generate_conf(self, configs: dict, path: str) -&gt; None:\n    \"\"\"Save the outcome after replacement on the template to file.\"\"\"\n    output = self.compile(configs)\n    with open(path, \"w+\", encoding=\"utf-8\") as output_file:\n        output_file.write(output)\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.get_freesurfer_colormap","title":"get_freesurfer_colormap","text":"<pre><code>get_freesurfer_colormap(freesurfer_home: Path | str) -&gt; ListedColormap\n</code></pre> <p>Generate matplotlib colormap from FreeSurfer LUT.</p> <p>Code from: https://github.com/Deep-MI/qatools-python/blob/freesurfer-module-releases/qatoolspython/createScreenshots.py</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>colormap</code> (              <code>ListedColormap</code> )          \u2013            <p>A matplotlib compatible FreeSurfer colormap.</p> </li> </ul> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def get_freesurfer_colormap(freesurfer_home: Path | str) -&gt; colors.ListedColormap:\n    \"\"\"Generate matplotlib colormap from FreeSurfer LUT.\n\n    Code from:\n    https://github.com/Deep-MI/qatools-python/blob/freesurfer-module-releases/qatoolspython/createScreenshots.py\n\n    Parameters\n    ----------\n    freesurfer_home : path or str representing a path to a directory\n        Path corresponding to FREESURFER_HOME env var.\n\n    Returns\n    -------\n    colormap : matplotlib.colors.ListedColormap\n        A matplotlib compatible FreeSurfer colormap.\n\n    \"\"\"\n    freesurfer_home = Path(freesurfer_home) if isinstance(freesurfer_home, str) else freesurfer_home\n    lut = pd.read_csv(\n        freesurfer_home / \"FreeSurferColorLUT.txt\",\n        sep=r\"\\s+\",\n        comment=\"#\",\n        header=None,\n        skipinitialspace=True,\n        skip_blank_lines=True,\n    )\n    lut = np.array(lut)\n    lut_tab = np.array(lut[:, (2, 3, 4, 5)] / 255, dtype=\"float32\")\n    lut_tab[:, 3] = 1\n\n    return colors.ListedColormap(lut_tab)\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.get_freesurfer_colormap(freesurfer_home)","title":"<code>freesurfer_home</code>","text":"(<code>path or str representing a path to a directory</code>)           \u2013            <p>Path corresponding to FREESURFER_HOME env var.</p>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.get_parser","title":"get_parser","text":"<pre><code>get_parser() -&gt; ArgumentParser\n</code></pre> <p>Return the CLI argument parser.</p> <p>Returns:</p> <ul> <li> <code>An argparse parser.</code>           \u2013            </li> </ul> Source code in <code>src/pyfsviz/_internal/cli.py</code> <pre><code>def get_parser() -&gt; argparse.ArgumentParser:\n    \"\"\"Return the CLI argument parser.\n\n    Returns\n    -------\n    An argparse parser.\n    \"\"\"\n    parser = argparse.ArgumentParser(prog=\"pyfsviz\")\n    parser.add_argument(\"-V\", \"--version\", action=\"version\", version=f\"%(prog)s {debug._get_version()}\")\n    parser.add_argument(\"--debug-info\", action=_DebugInfo, help=\"Print debug information.\")\n    return parser\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.main","title":"main","text":"<pre><code>main(args: list[str] | None = None) -&gt; int\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>pyfsviz</code> or <code>python -m pyfsviz</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>An exit code.</code>           \u2013            </li> </ul> Source code in <code>src/pyfsviz/_internal/cli.py</code> <pre><code>def main(args: list[str] | None = None) -&gt; int:\n    \"\"\"Run the main program.\n\n    This function is executed when you type `pyfsviz` or `python -m pyfsviz`.\n\n    Parameters\n    ----------\n    args: Arguments passed from the command line.\n\n    Returns\n    -------\n    An exit code.\n    \"\"\"\n    parser = get_parser()\n    opts = parser.parse_args(args=args)\n    print(opts)\n    return 0\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/#pyfsviz.main(args)","title":"<code>args</code>","text":"(<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013"},{"location":"autoapi/summary/pyfsviz/freesurfer/","title":"freesurfer","text":""},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer","title":"freesurfer","text":"<p>FreeSurfer data.</p> <p>Classes:</p> <ul> <li> <code>FreeSurfer</code>           \u2013            <p>Base class for FreeSurfer data.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_freesurfer_colormap</code>             \u2013              <p>Generate matplotlib colormap from FreeSurfer LUT.</p> </li> </ul>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer","title":"FreeSurfer","text":"<pre><code>FreeSurfer(freesurfer_home: str | None = None, subjects_dir: str | None = None, log_level: str = 'INFO')\n</code></pre> <p>Base class for FreeSurfer data.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>check_recon_all</code>             \u2013              <p>Verify that the subject's FreeSurfer recon finished successfully.</p> </li> <li> <code>gen_aparcaseg_plots</code>             \u2013              <p>Generate parcellation images (aparc &amp; aseg) and return the path to the aparcaseg.png file.</p> </li> <li> <code>gen_batch_reports</code>             \u2013              <p>Generate HTML reports with images for multiple subjects.</p> </li> <li> <code>gen_html_report</code>             \u2013              <p>Generate html report with FreeSurfer images.</p> </li> <li> <code>gen_surf_plots</code>             \u2013              <p>Generate pial, inflated, and sulcal images from various viewpoints.</p> </li> <li> <code>gen_tlrc_data</code>             \u2013              <p>Generate inverse talairach data for report generation.</p> </li> <li> <code>gen_tlrc_report</code>             \u2013              <p>Generate a before and after report of Talairach registration. (Will also run file generation if needed).</p> </li> <li> <code>get_colormap</code>             \u2013              <p>Return the colormap for the FreeSurfer data.</p> </li> <li> <code>get_subjects</code>             \u2013              <p>Return the subjects in the subjects directory.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>freesurfer_home</code>           \u2013            <p>Path to the FreeSurfer home directory.</p> </li> <li> <code>logger</code>           \u2013            <p>Logger for the FreeSurfer class.</p> </li> <li> <code>subjects_dir</code>           \u2013            <p>Path to the subjects directory.</p> </li> </ul> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def __init__(\n    self,\n    freesurfer_home: str | None = None,\n    subjects_dir: str | None = None,\n    log_level: str = \"INFO\",\n):\n    \"\"\"Initialize the FreeSurfer data.\n\n    Parameters\n    ----------\n    freesurfer_home : str representing a path to a directory\n        Path corresponding to FREESURFER_HOME env var.\n    subjects_dir : str representing a path to a directory\n        Path corresponding to SUBJECTS_DIR env var.\n    log_level : str\n        Logging level (e.g., \"INFO\", \"DEBUG\", \"WARNING\").\n        Default is \"INFO\".\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    # Set up logger\n    logging.basicConfig(level=getattr(logging, log_level.upper()))\n    self.logger = logging.getLogger(f\"{__name__}.{self.__class__.__name__}\")\n    \"\"\"Logger for the FreeSurfer class.\"\"\"\n\n    if freesurfer_home is None:\n        self.freesurfer_home = Path(os.environ.get(\"FREESURFER_HOME\") or \"\")\n        \"\"\"Path to the FreeSurfer home directory.\"\"\"\n    else:\n        self.freesurfer_home = Path(freesurfer_home)\n        \"\"\"Path to the FreeSurfer home directory.\"\"\"\n    if not self.freesurfer_home.exists():\n        raise FileNotFoundError(f\"FREESURFER_HOME not found: {self.freesurfer_home}\")\n    if self.freesurfer_home is None:\n        raise ValueError(\"FREESURFER_HOME must be set\")\n\n    if subjects_dir is None:\n        self.subjects_dir = Path(os.environ.get(\"SUBJECTS_DIR\") or \"\")\n        \"\"\"Path to the subjects directory.\"\"\"\n    else:\n        self.subjects_dir = Path(subjects_dir)\n        \"\"\"Path to the subjects directory.\"\"\"\n    if not self.subjects_dir.exists():\n        raise FileNotFoundError(f\"SUBJECTS_DIR not found: {self.subjects_dir}\")\n    \"\"\"Path to the subjects directory.\"\"\"\n    self._mni_nii = files(\"pyfsviz._internal\") / \"mni305.cor.nii.gz\"\n    \"\"\"Path to the MNI template NIfTI file.\"\"\"\n    self._mni_mgz = files(\"pyfsviz._internal\") / \"mni305.cor.mgz\"\n    \"\"\"Path to the MNI template MGH file.\"\"\"\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer(freesurfer_home)","title":"<code>freesurfer_home</code>","text":"(<code>str representing a path to a directory</code>, default:                   <code>None</code> )           \u2013            <p>Path corresponding to FREESURFER_HOME env var.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer(subjects_dir)","title":"<code>subjects_dir</code>","text":"(<code>str representing a path to a directory</code>, default:                   <code>None</code> )           \u2013            <p>Path corresponding to SUBJECTS_DIR env var.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer(log_level)","title":"<code>log_level</code>","text":"(<code>str</code>, default:                   <code>'INFO'</code> )           \u2013            <p>Logging level (e.g., \"INFO\", \"DEBUG\", \"WARNING\"). Default is \"INFO\".</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.freesurfer_home","title":"freesurfer_home  <code>instance-attribute</code>","text":"<pre><code>freesurfer_home = Path(get('FREESURFER_HOME') or '')\n</code></pre> <p>Path to the FreeSurfer home directory.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = getLogger(f'{__name__}.{__name__}')\n</code></pre> <p>Logger for the FreeSurfer class.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.subjects_dir","title":"subjects_dir  <code>instance-attribute</code>","text":"<pre><code>subjects_dir = Path(get('SUBJECTS_DIR') or '')\n</code></pre> <p>Path to the subjects directory.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.check_recon_all","title":"check_recon_all","text":"<pre><code>check_recon_all(subject: str) -&gt; bool\n</code></pre> <p>Verify that the subject's FreeSurfer recon finished successfully.</p> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def check_recon_all(self, subject: str) -&gt; bool:\n    \"\"\"Verify that the subject's FreeSurfer recon finished successfully.\"\"\"\n    recon_file = self.subjects_dir / subject / \"scripts\" / \"recon-all.log\"\n\n    with open(recon_file, encoding=\"utf-8\") as f:\n        line = f.readlines()[-1]\n        return \"finished without error\" in line\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_aparcaseg_plots","title":"gen_aparcaseg_plots","text":"<pre><code>gen_aparcaseg_plots(subject: str, output_dir: str) -&gt; Path\n</code></pre> <p>Generate parcellation images (aparc &amp; aseg) and return the path to the aparcaseg.png file.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Path</code> (              <code>Path</code> )          \u2013            <p>Path to the aparcaseg.png file.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n&gt;&gt;&gt; fs_dir = FreeSurfer(\n...     freesurfer_home=\"/opt/freesurfer\",\n...     subjects_dir=\"/opt/data\",\n...     subject=\"sub-001\",\n... )\n&gt;&gt;&gt; images = fs_dir.gen_aparcaseg_plots(\n...     \"sub-001\", Path(\"/opt/data/sub-001/mri/transforms\")\n... )\n</code></pre> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def gen_aparcaseg_plots(self, subject: str, output_dir: str) -&gt; Path:\n    \"\"\"Generate parcellation images (aparc &amp; aseg) and return the path to the aparcaseg.png file.\n\n    Parameters\n    ----------\n    subject : str\n        Subject ID.\n    output_dir : str\n        Path to output directory.\n\n    Returns\n    -------\n    Path:\n        Path to the aparcaseg.png file.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n    &gt;&gt;&gt; fs_dir = FreeSurfer(\n    ...     freesurfer_home=\"/opt/freesurfer\",\n    ...     subjects_dir=\"/opt/data\",\n    ...     subject=\"sub-001\",\n    ... )\n    &gt;&gt;&gt; images = fs_dir.gen_aparcaseg_plots(\n    ...     \"sub-001\", Path(\"/opt/data/sub-001/mri/transforms\")\n    ... )\n    \"\"\"\n    fsqc.run_fsqc(\n        subjects_dir=self.subjects_dir,\n        output_dir=output_dir,\n        subjects=[subject],\n        screenshots=True,\n        screenshots_overlay=\"aparc+aseg.mgz\",\n        screenshots_views=[\n            \"x=-40\",\n            \"x=-30\",\n            \"x=-20\",\n            \"x=-10\",\n            \"x=0\",\n            \"x=10\",\n            \"x=20\",\n            \"x=30\",\n            \"x=40\",\n            \"y=-40\",\n            \"y=-30\",\n            \"y=-20\",\n            \"y=-10\",\n            \"y=0\",\n            \"y=10\",\n            \"y=20\",\n            \"y=30\",\n            \"y=40\",\n            \"z=-40\",\n            \"z=-30\",\n            \"z=-20\",\n            \"z=-10\",\n            \"z=0\",\n            \"z=10\",\n            \"z=20\",\n            \"z=30\",\n            \"z=40\",\n        ],\n        screenshots_layout=[\"3\", \"9\"],\n        no_group=True,\n    )\n\n    # Clean up/move files\n    shutil.move(f\"{output_dir}/screenshots/{subject}/{subject}.png\", f\"{output_dir}/aparcaseg.png\")\n    shutil.move(f\"{output_dir}/metrics/{subject}/metrics.csv\", f\"{output_dir}/metrics.csv\")\n    shutil.rmtree(f\"{output_dir}/screenshots\")\n    shutil.rmtree(f\"{output_dir}/status\")\n    shutil.rmtree(f\"{output_dir}/metrics\")\n\n    return Path(f\"{output_dir}/aparcaseg.png\")\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_aparcaseg_plots(subject)","title":"<code>subject</code>","text":"(<code>str</code>)           \u2013            <p>Subject ID.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_aparcaseg_plots(output_dir)","title":"<code>output_dir</code>","text":"(<code>str</code>)           \u2013            <p>Path to output directory.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_batch_reports","title":"gen_batch_reports","text":"<pre><code>gen_batch_reports(output_dir: str | Path, subjects: list[str] | None = None, template: str | None = None, *, gen_images: bool = True, skip_failed: bool = True) -&gt; dict[str, Path | Exception]\n</code></pre> <p>Generate HTML reports with images for multiple subjects.</p> <p>This method first generates all required images (TLRC, aparc+aseg, surfaces) and then creates HTML reports for each subject.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Path | Exception]</code>           \u2013            <p>Dictionary mapping subject IDs to either the generated HTML file path or the exception that occurred during processing.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n&gt;&gt;&gt; fs = FreeSurfer()\n&gt;&gt;&gt; results = fs.gen_batch_reports(\"reports/\", log_level=\"INFO\")\n&gt;&gt;&gt; for subject, result in results.items():\n...     if isinstance(result, Path):\n...         print(f\"Generated report for {subject}: {result}\")\n...     else:\n...         print(f\"Failed to generate report for {subject}: {result}\")\n</code></pre> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def gen_batch_reports(\n    self,\n    output_dir: str | Path,\n    subjects: list[str] | None = None,\n    template: str | None = None,\n    *,\n    gen_images: bool = True,\n    skip_failed: bool = True,\n) -&gt; dict[str, Path | Exception]:\n    \"\"\"Generate HTML reports with images for multiple subjects.\n\n    This method first generates all required images (TLRC, aparc+aseg, surfaces)\n    and then creates HTML reports for each subject.\n\n    Parameters\n    ----------\n    output_dir : str or Path\n        Directory where HTML reports will be saved.\n    subjects : list[str] or None\n        List of subject IDs to process. If None, processes all subjects\n        in the subjects directory.\n    template : str or None\n        HTML template to use. Default is local individual.html.\n    gen_images : bool\n        Generate images for each subject. Default is True.\n    skip_failed : bool\n        If True, continues processing other subjects if one fails.\n        If False, raises exception on first failure.\n\n    Returns\n    -------\n    dict[str, Path | Exception]\n        Dictionary mapping subject IDs to either the generated HTML file\n        path or the exception that occurred during processing.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n    &gt;&gt;&gt; fs = FreeSurfer()\n    &gt;&gt;&gt; results = fs.gen_batch_reports(\"reports/\", log_level=\"INFO\")\n    &gt;&gt;&gt; for subject, result in results.items():\n    ...     if isinstance(result, Path):\n    ...         print(f\"Generated report for {subject}: {result}\")\n    ...     else:\n    ...         print(f\"Failed to generate report for {subject}: {result}\")\n    \"\"\"\n    output_dir = Path(output_dir)\n    output_dir.mkdir(parents=True, exist_ok=True)\n\n    if subjects is None:\n        subjects = self.get_subjects()\n\n    self.logger.info(f\"Generating reports with images for {len(subjects)} subjects...\")\n    self.logger.info(f\"Output directory: {output_dir}\")\n\n    results: dict[str, Path | Exception] = {}\n\n    for i, subject in enumerate(subjects, 1):\n        self.logger.info(f\"[{i}/{len(subjects)}] Processing subject: {subject}\")\n\n        try:\n            # Check if recon-all completed successfully\n            if not self.check_recon_all(subject):\n                self.logger.warning(f\"Subject {subject} recon-all did not complete successfully\")\n\n            # Create subject-specific output directory for images\n            subject_output_dir = output_dir / subject\n            subject_output_dir.mkdir(parents=True, exist_ok=True)\n\n            # Generate images\n            self.logger.info(f\"  Generating images for {subject}...\")\n\n            img_list = []\n            if gen_images:\n                # Generate TLRC data and report\n                # Use a temporary subdirectory for intermediate files\n                temp_tlrc_dir = subject_output_dir / \"tlrc_temp\"\n                temp_tlrc_dir.mkdir(exist_ok=True)\n\n                self.gen_tlrc_data(subject, str(temp_tlrc_dir))\n                tlrc = Path(self.gen_tlrc_report(subject, str(temp_tlrc_dir)))\n\n                # Move tlrc.svg to subject directory\n                if tlrc.exists():\n                    new_tlrc_path = subject_output_dir / \"tlrc.svg\"\n                    tlrc.rename(new_tlrc_path)\n                    img_list.append(new_tlrc_path)\n                else:\n                    img_list.append(tlrc)\n\n                # Clean up intermediate files\n                shutil.rmtree(temp_tlrc_dir, ignore_errors=True)\n\n                # Generate aparc+aseg plots - save directly to subject directory\n                aparcaseg = self.gen_aparcaseg_plots(subject, str(subject_output_dir))\n                img_list.append(aparcaseg)\n\n                # Generate surface plots - save directly to subject directory\n                surf = self.gen_surf_plots(subject, str(subject_output_dir))\n                img_list.extend(surf)\n            else:\n                img_list = list(subject_output_dir.glob(\"**/*.{png,svg}\"))\n\n            # Generate HTML report using all generated images\n            html_file = self.gen_html_report(\n                subject=subject,\n                output_dir=str(output_dir),\n                img_list=img_list,\n                template=template,\n            )\n\n            results[subject] = html_file\n\n            self.logger.info(f\"  \u2713 Generated report with images: {html_file}\")\n\n        except Exception as e:\n            error_msg = f\"Failed to generate report with images for {subject}: {e!s}\"\n            results[subject] = e\n\n            self.logger.error(f\"  \u2717 {error_msg}\")  # noqa: TRY400\n\n            if not skip_failed:\n                raise e  # noqa: TRY201 # pylint: disable=try-except-raise\n\n    successful = sum(1 for result in results.values() if isinstance(result, Path))\n    failed = len(results) - successful\n    self.logger.info(\"\\nBatch report generation with images completed:\")\n    self.logger.info(f\"  Successful: {successful}\")\n    self.logger.info(f\"  Failed: {failed}\")\n\n    return results\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_batch_reports(output_dir)","title":"<code>output_dir</code>","text":"(<code>str or Path</code>)           \u2013            <p>Directory where HTML reports will be saved.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_batch_reports(subjects)","title":"<code>subjects</code>","text":"(<code>list[str] or None</code>, default:                   <code>None</code> )           \u2013            <p>List of subject IDs to process. If None, processes all subjects in the subjects directory.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_batch_reports(template)","title":"<code>template</code>","text":"(<code>str or None</code>, default:                   <code>None</code> )           \u2013            <p>HTML template to use. Default is local individual.html.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_batch_reports(gen_images)","title":"<code>gen_images</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Generate images for each subject. Default is True.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_batch_reports(skip_failed)","title":"<code>skip_failed</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, continues processing other subjects if one fails. If False, raises exception on first failure.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_html_report","title":"gen_html_report","text":"<pre><code>gen_html_report(subject: str, output_dir: str, img_list: list[Path] | None = None, template: str | None = None) -&gt; Path\n</code></pre> <p>Generate html report with FreeSurfer images.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Path</code> (              <code>Path</code> )          \u2013            <p>Path to html file.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n&gt;&gt;&gt; fs_dir = FreeSurfer(\n...     freesurfer_home=\"/opt/freesurfer\",\n...     subjects_dir=\"/opt/data\",\n...     subject=\"sub-001\",\n... )\n&gt;&gt;&gt; report = fs_dir.gen_html_report(out_name=\"sub-001.html\", output_dir=\".\")\n</code></pre> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def gen_html_report(\n    self,\n    subject: str,\n    output_dir: str,\n    img_list: list[Path] | None = None,\n    template: str | None = None,\n) -&gt; Path:\n    \"\"\"Generate html report with FreeSurfer images.\n\n    Parameters\n    ----------\n    subject : str\n        Subject ID.\n    output_dir : str\n        HTML file name\n    img_list : list[Path] | None\n        List of image paths (PNG format).\n    template : str | None\n        HTML template to use. Default is local freesurfer.html.\n\n    Returns\n    -------\n    Path:\n        Path to html file.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n    &gt;&gt;&gt; fs_dir = FreeSurfer(\n    ...     freesurfer_home=\"/opt/freesurfer\",\n    ...     subjects_dir=\"/opt/data\",\n    ...     subject=\"sub-001\",\n    ... )\n    &gt;&gt;&gt; report = fs_dir.gen_html_report(out_name=\"sub-001.html\", output_dir=\".\")\n    \"\"\"\n    if template is None:\n        template = files(\"pyfsviz._internal.html\") / \"individual.html\"\n    if img_list is None:\n        img_list = list((self.subjects_dir / subject).glob(\"**/*.{png,svg}\"))\n\n    tlrc = []\n    aseg = []\n    surf = []\n\n    output_path = Path(output_dir)\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    # Subject-specific directory\n    subject_dir = output_path / subject\n    subject_dir.mkdir(parents=True, exist_ok=True)\n\n    for img in img_list:\n        if \"tlrc\" in img.name and img.suffix == \".svg\":\n            # Read SVG content directly for embedding\n            with open(img, encoding=\"utf-8\") as f:\n                svg_content = f.read()\n            tlrc.append(svg_content)\n        # Images are already in the subject directory, just reference by filename\n        elif \"aparcaseg\" in img.name:\n            aseg.append(img.name)\n        else:\n            labels = {\n                \"lh_pial\": \"LH Pial\",\n                \"rh_pial\": \"RH Pial\",\n                \"lh_infl\": \"LH Inflated\",\n                \"rh_infl\": \"RH Inflated\",\n                \"lh_white\": \"LH White Matter\",\n                \"rh_white\": \"RH White Matter\",\n            }\n            surface_type = img.stem\n            surf_tuple = (labels.get(surface_type, surface_type), img.name)\n            surf.append(surf_tuple)\n\n    # Read metrics.csv if it exists\n    metrics = None\n    metrics_csv_path = output_path / \"metrics.csv\"\n    if metrics_csv_path.exists():\n        try:\n            df = pd.read_csv(metrics_csv_path)\n            # Filter for current subject if subject column exists\n            if \"subject\" in df.columns:\n                subject_data = df[df[\"subject\"] == subject]\n                if not subject_data.empty:\n                    metrics = subject_data.iloc[0].to_dict()\n            # If no subject column, assume single row\n            elif len(df) &gt; 0:\n                metrics = df.iloc[0].to_dict()\n            # Replace NaN values with None for proper Jinja2 handling\n            if metrics:\n                metrics = {k: (None if pd.isna(v) else v) for k, v in metrics.items()}\n        except (pd.errors.EmptyDataError, pd.errors.ParserError, UnicodeDecodeError, PermissionError, OSError) as e:\n            self.logger.warning(f\"Could not read metrics.csv: {e}\")\n\n    _config = {\n        \"timestamp\": datetime.datetime.now(tz=datetime.timezone.utc).strftime(\"%Y-%m-%d, %H:%M\"),\n        \"subject\": subject,\n        \"tlrc\": tlrc,\n        \"aseg\": aseg,\n        \"surf\": surf,\n        \"metrics\": metrics,\n    }\n\n    # Save HTML file in subject directory\n    html_file = subject_dir / f\"{subject}.html\"\n    tpl = Template(str(template))\n    tpl.generate_conf(_config, str(html_file))\n\n    return html_file\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_html_report(subject)","title":"<code>subject</code>","text":"(<code>str</code>)           \u2013            <p>Subject ID.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_html_report(output_dir)","title":"<code>output_dir</code>","text":"(<code>str</code>)           \u2013            <p>HTML file name</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_html_report(img_list)","title":"<code>img_list</code>","text":"(<code>list[Path] | None</code>, default:                   <code>None</code> )           \u2013            <p>List of image paths (PNG format).</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_html_report(template)","title":"<code>template</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>HTML template to use. Default is local freesurfer.html.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_surf_plots","title":"gen_surf_plots","text":"<pre><code>gen_surf_plots(subject: str, output_dir: str) -&gt; list[Path]\n</code></pre> <p>Generate pial, inflated, and sulcal images from various viewpoints.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Path]:</code>           \u2013            <p>List of generated PNG images</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n&gt;&gt;&gt; fs_dir = FreeSurfer(\n...     freesurfer_home=\"/opt/freesurfer\",\n...     subjects_dir=\"/opt/data\",\n...     subject=\"sub-001\",\n... )\n&gt;&gt;&gt; images = fs_dir.gen_surf_plots(\"sub-001\", Path(\"/opt/data/sub-001/surf\"))\n</code></pre> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def gen_surf_plots(self, subject: str, output_dir: str) -&gt; list[Path]:\n    \"\"\"Generate pial, inflated, and sulcal images from various viewpoints.\n\n    Parameters\n    ----------\n    output_dir : str\n        Surface plot output directory.\n\n    Returns\n    -------\n    list[Path]:\n        List of generated PNG images\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n    &gt;&gt;&gt; fs_dir = FreeSurfer(\n    ...     freesurfer_home=\"/opt/freesurfer\",\n    ...     subjects_dir=\"/opt/data\",\n    ...     subject=\"sub-001\",\n    ... )\n    &gt;&gt;&gt; images = fs_dir.gen_surf_plots(\"sub-001\", Path(\"/opt/data/sub-001/surf\"))\n    \"\"\"\n    surf_dir = f\"{self.subjects_dir}/{subject}/surf\"\n    label_dir = f\"{self.subjects_dir}/{subject}/label\"\n    cmap = self.get_colormap()\n\n    hemis = {\"lh\": \"left\", \"rh\": \"right\"}\n    for key, val in hemis.items():\n        pial = f\"{surf_dir}/{key}.pial\"\n        inflated = f\"{surf_dir}/{key}.inflated\"\n        sulc = f\"{surf_dir}/{key}.sulc\"\n        white = f\"{surf_dir}/{key}.white\"\n        annot = f\"{label_dir}/{key}.aparc.annot\"\n\n        label_files = {pial: \"pial\", inflated: \"infl\", white: \"white\"}\n\n        for surf, label in label_files.items():\n            fig, axs = plt.subplots(2, 3, subplot_kw={\"projection\": \"3d\"})\n            plotting.plot_surf_roi(\n                surf,\n                annot,\n                hemi=val,\n                view=\"lateral\",\n                bg_map=sulc,\n                bg_on_data=True,\n                darkness=1,\n                cmap=cmap,\n                axes=axs[0, 0],\n                figure=fig,\n                colorbar=False,\n            )\n            plotting.plot_surf_roi(\n                surf,\n                annot,\n                hemi=val,\n                view=\"medial\",\n                bg_map=sulc,\n                bg_on_data=True,\n                darkness=1,\n                cmap=cmap,\n                axes=axs[0, 1],\n                figure=fig,\n                colorbar=False,\n            )\n            plotting.plot_surf_roi(\n                surf,\n                annot,\n                hemi=val,\n                view=\"dorsal\",\n                bg_map=sulc,\n                bg_on_data=True,\n                darkness=1,\n                cmap=cmap,\n                axes=axs[0, 2],\n                figure=fig,\n                colorbar=False,\n            )\n            plotting.plot_surf_roi(\n                surf,\n                annot,\n                hemi=val,\n                view=\"ventral\",\n                bg_map=sulc,\n                bg_on_data=True,\n                darkness=1,\n                cmap=cmap,\n                axes=axs[1, 0],\n                figure=fig,\n                colorbar=False,\n            )\n            plotting.plot_surf_roi(\n                surf,\n                annot,\n                hemi=val,\n                view=\"anterior\",\n                bg_map=sulc,\n                bg_on_data=True,\n                darkness=1,\n                cmap=cmap,\n                axes=axs[1, 1],\n                figure=fig,\n                colorbar=False,\n            )\n            plotting.plot_surf_roi(\n                surf,\n                annot,\n                hemi=val,\n                view=\"posterior\",\n                bg_map=sulc,\n                bg_on_data=True,\n                darkness=1,\n                cmap=cmap,\n                axes=axs[1, 2],\n                figure=fig,\n                colorbar=False,\n            )\n\n            plt.savefig(f\"{output_dir}/{key}_{label}.png\", dpi=300, format=\"png\")\n            plt.close()\n\n    return sorted(Path(output_dir).glob(\"*.png\"))\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_surf_plots(output_dir)","title":"<code>output_dir</code>","text":"(<code>str</code>)           \u2013            <p>Surface plot output directory.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_tlrc_data","title":"gen_tlrc_data","text":"<pre><code>gen_tlrc_data(subject: str, output_dir: str) -&gt; None\n</code></pre> <p>Generate inverse talairach data for report generation.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n&gt;&gt;&gt; fs_dir = FreeSurfer(\n...     freesurfer_home=\"/opt/freesurfer\",\n...     subjects_dir=\"/opt/data\",\n...     subject=\"sub-001\",\n... )\n&gt;&gt;&gt; fs_dir.gen_tlrc_data(\"sub-001\", Path(\"/opt/data/sub-001/mri/transforms\"))\n</code></pre> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def gen_tlrc_data(self, subject: str, output_dir: str) -&gt; None:\n    \"\"\"Generate inverse talairach data for report generation.\n\n    Parameters\n    ----------\n    output_dir : str\n        Path for intermediate file output.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n    &gt;&gt;&gt; fs_dir = FreeSurfer(\n    ...     freesurfer_home=\"/opt/freesurfer\",\n    ...     subjects_dir=\"/opt/data\",\n    ...     subject=\"sub-001\",\n    ... )\n    &gt;&gt;&gt; fs_dir.gen_tlrc_data(\"sub-001\", Path(\"/opt/data/sub-001/mri/transforms\"))\n    \"\"\"\n    # get inverse transform\n    lta_file = self.subjects_dir / subject / \"mri\" / \"transforms\" / \"talairach.xfm.lta\"\n    xfm = np.genfromtxt(lta_file, skip_header=5, max_rows=4)\n    inverse_xfm = np.linalg.inv(xfm)\n    np.savetxt(\n        f\"{output_dir}/inv.xfm\",\n        inverse_xfm,\n        fmt=\"%0.8f\",\n        delimiter=\" \",\n        newline=\"\\n\",\n        encoding=\"utf-8\",\n    )\n\n    # convert subject original T1 to nifti (for FSL)\n    convert = MRIConvert(\n        in_file=self.subjects_dir / subject / \"mri\" / \"orig.mgz\",\n        out_file=f\"{output_dir}/orig.nii.gz\",\n        out_type=\"niigz\",\n    )\n    convert.run()\n\n    # use FSL to convert template file to subject original space\n    flirt = FLIRT(\n        in_file=self._mni_nii,\n        reference=f\"{output_dir}/orig.nii.gz\",\n        out_file=f\"{output_dir}/mni2orig.nii.gz\",\n        in_matrix_file=f\"{output_dir}/inv.xfm\",\n        apply_xfm=True,\n        out_matrix_file=f\"{output_dir}/out.mat\",\n    )\n    flirt.run()\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_tlrc_data(output_dir)","title":"<code>output_dir</code>","text":"(<code>str</code>)           \u2013            <p>Path for intermediate file output.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_tlrc_report","title":"gen_tlrc_report","text":"<pre><code>gen_tlrc_report(subject: str, output_dir: str, tlrc_dir: str | None = None, *, gen_data: bool = True) -&gt; Path\n</code></pre> <p>Generate a before and after report of Talairach registration. (Will also run file generation if needed).</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Path</code> (              <code>Path</code> )          \u2013            <p>SVG file generated from the niworkflows SimpleBeforeAfterRPT</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n&gt;&gt;&gt; fs_dir = FreeSurfer(\n...     freesurfer_home=\"/opt/freesurfer\",\n...     subjects_dir=\"/opt/data\",\n...     subject=\"sub-001\",\n... )\n&gt;&gt;&gt; report = fs_dir.gen_tlrc_report(\n...     \"sub-001\", Path(\"/opt/data/sub-001/mri/transforms\")\n... )\n</code></pre> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def gen_tlrc_report(\n    self,\n    subject: str,\n    output_dir: str,\n    tlrc_dir: str | None = None,\n    *,\n    gen_data: bool = True,\n) -&gt; Path:\n    \"\"\"Generate a before and after report of Talairach registration. (Will also run file generation if needed).\n\n    Parameters\n    ----------\n    subject : str\n        Subject ID.\n    output_dir : str\n        Path to SVG output.\n    gen_data : bool\n        Generate inverse Talairach data, by default True\n    tlrc_dir : str | None\n        Path to output of `gen_tlrc_data`. Default is the subject's mri/transforms directory.\n\n    Returns\n    -------\n    Path:\n        SVG file generated from the niworkflows SimpleBeforeAfterRPT\n\n    Examples\n    --------\n    &gt;&gt;&gt; from pyfsviz.freesurfer import FreeSurfer\n    &gt;&gt;&gt; fs_dir = FreeSurfer(\n    ...     freesurfer_home=\"/opt/freesurfer\",\n    ...     subjects_dir=\"/opt/data\",\n    ...     subject=\"sub-001\",\n    ... )\n    &gt;&gt;&gt; report = fs_dir.gen_tlrc_report(\n    ...     \"sub-001\", Path(\"/opt/data/sub-001/mri/transforms\")\n    ... )\n    \"\"\"\n    if tlrc_dir is None:\n        tlrc_dir = f\"{self.subjects_dir}/{subject}/mri/transforms\"\n\n    mri_dir = f\"{self.subjects_dir}/{subject}/mri\"\n\n    if gen_data:\n        self.gen_tlrc_data(subject, tlrc_dir)\n\n    # use white matter segmentation to compare registrations\n    report = SimpleBeforeAfterRPT(\n        before=f\"{mri_dir}/orig.mgz\",\n        after=f\"{tlrc_dir}/mni2orig.nii.gz\",\n        wm_seg=f\"{mri_dir}/wm.mgz\",\n        before_label=\"Subject Orig\",\n        after_label=\"Template\",\n        out_report=f\"{output_dir}/tlrc.svg\",\n    )\n    result = report.run()\n    return result.outputs.out_report\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_tlrc_report(subject)","title":"<code>subject</code>","text":"(<code>str</code>)           \u2013            <p>Subject ID.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_tlrc_report(output_dir)","title":"<code>output_dir</code>","text":"(<code>str</code>)           \u2013            <p>Path to SVG output.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_tlrc_report(gen_data)","title":"<code>gen_data</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Generate inverse Talairach data, by default True</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.gen_tlrc_report(tlrc_dir)","title":"<code>tlrc_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Path to output of <code>gen_tlrc_data</code>. Default is the subject's mri/transforms directory.</p>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.get_colormap","title":"get_colormap","text":"<pre><code>get_colormap() -&gt; ListedColormap\n</code></pre> <p>Return the colormap for the FreeSurfer data.</p> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def get_colormap(self) -&gt; colors.ListedColormap:\n    \"\"\"Return the colormap for the FreeSurfer data.\"\"\"\n    return get_freesurfer_colormap(self.freesurfer_home)\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.FreeSurfer.get_subjects","title":"get_subjects","text":"<pre><code>get_subjects() -&gt; list[str]\n</code></pre> <p>Return the subjects in the subjects directory.</p> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def get_subjects(self) -&gt; list[str]:\n    \"\"\"Return the subjects in the subjects directory.\"\"\"\n    return [\n        subject.name\n        for subject in self.subjects_dir.iterdir()\n        if subject.is_dir() and (subject / \"mri\" / \"transforms\" / \"talairach.lta\").exists()\n    ]\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.get_freesurfer_colormap","title":"get_freesurfer_colormap","text":"<pre><code>get_freesurfer_colormap(freesurfer_home: Path | str) -&gt; ListedColormap\n</code></pre> <p>Generate matplotlib colormap from FreeSurfer LUT.</p> <p>Code from: https://github.com/Deep-MI/qatools-python/blob/freesurfer-module-releases/qatoolspython/createScreenshots.py</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>colormap</code> (              <code>ListedColormap</code> )          \u2013            <p>A matplotlib compatible FreeSurfer colormap.</p> </li> </ul> Source code in <code>src/pyfsviz/freesurfer.py</code> <pre><code>def get_freesurfer_colormap(freesurfer_home: Path | str) -&gt; colors.ListedColormap:\n    \"\"\"Generate matplotlib colormap from FreeSurfer LUT.\n\n    Code from:\n    https://github.com/Deep-MI/qatools-python/blob/freesurfer-module-releases/qatoolspython/createScreenshots.py\n\n    Parameters\n    ----------\n    freesurfer_home : path or str representing a path to a directory\n        Path corresponding to FREESURFER_HOME env var.\n\n    Returns\n    -------\n    colormap : matplotlib.colors.ListedColormap\n        A matplotlib compatible FreeSurfer colormap.\n\n    \"\"\"\n    freesurfer_home = Path(freesurfer_home) if isinstance(freesurfer_home, str) else freesurfer_home\n    lut = pd.read_csv(\n        freesurfer_home / \"FreeSurferColorLUT.txt\",\n        sep=r\"\\s+\",\n        comment=\"#\",\n        header=None,\n        skipinitialspace=True,\n        skip_blank_lines=True,\n    )\n    lut = np.array(lut)\n    lut_tab = np.array(lut[:, (2, 3, 4, 5)] / 255, dtype=\"float32\")\n    lut_tab[:, 3] = 1\n\n    return colors.ListedColormap(lut_tab)\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/freesurfer/#pyfsviz.freesurfer.get_freesurfer_colormap(freesurfer_home)","title":"<code>freesurfer_home</code>","text":"(<code>path or str representing a path to a directory</code>)           \u2013            <p>Path corresponding to FREESURFER_HOME env var.</p>"},{"location":"autoapi/summary/pyfsviz/reports/","title":"reports","text":""},{"location":"autoapi/summary/pyfsviz/reports/#pyfsviz.reports","title":"reports","text":"<p>Utility class for generating a config file from a jinja template.</p> <p>https://github.com/oesteban/endofday/blob/f2e79c625d648ef45b08cc1f11fd0bd84342d604/endofday/core/template.py.</p> <p>Along with other report-related functions.</p> <p>Classes:</p> <ul> <li> <code>Template</code>           \u2013            <p>Simplified jinja2 template class from oesteban.</p> </li> </ul>"},{"location":"autoapi/summary/pyfsviz/reports/#pyfsviz.reports.Template","title":"Template","text":"<pre><code>Template(template_str: str)\n</code></pre> <p>Simplified jinja2 template class from oesteban.</p> <p>Methods:</p> <ul> <li> <code>compile</code>             \u2013              <p>Generate a string with the replacements.</p> </li> <li> <code>generate_conf</code>             \u2013              <p>Save the outcome after replacement on the template to file.</p> </li> </ul> Source code in <code>src/pyfsviz/reports.py</code> <pre><code>def __init__(self, template_str: str) -&gt; None:\n    self._template_str = template_str\n    self._env = jinja2.Environment(\n        loader=jinja2.FileSystemLoader(searchpath=\"/\"),\n        trim_blocks=True,\n        lstrip_blocks=True,\n        autoescape=True,\n    )\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/reports/#pyfsviz.reports.Template.compile","title":"compile","text":"<pre><code>compile(configs: dict) -&gt; str\n</code></pre> <p>Generate a string with the replacements.</p> Source code in <code>src/pyfsviz/reports.py</code> <pre><code>def compile(self, configs: dict) -&gt; str:\n    \"\"\"Generate a string with the replacements.\"\"\"\n    template = self._env.get_template(self._template_str)\n    return template.render(configs)\n</code></pre>"},{"location":"autoapi/summary/pyfsviz/reports/#pyfsviz.reports.Template.generate_conf","title":"generate_conf","text":"<pre><code>generate_conf(configs: dict, path: str) -&gt; None\n</code></pre> <p>Save the outcome after replacement on the template to file.</p> Source code in <code>src/pyfsviz/reports.py</code> <pre><code>def generate_conf(self, configs: dict, path: str) -&gt; None:\n    \"\"\"Save the outcome after replacement on the template to file.\"\"\"\n    output = self.compile(configs)\n    with open(path, \"w+\", encoding=\"utf-8\") as output_file:\n        output_file.write(output)\n</code></pre>"}]}